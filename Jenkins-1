pipeline {
    agent any

    environment {
        IMAGE_NAME = 'mfaical91/efleyer'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        DEV_SERVER = 'ubuntu@192.168.101.138'
        PROD_SERVER = 'ubuntu@192.168.101.140'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest"
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${IMAGE_NAME}:${IMAGE_TAG}
                        docker push ${IMAGE_NAME}:latest
                    """
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    def targetServer
                    def containerName
                    def port

                    if (env.BRANCH_NAME == 'develop') {
                        targetServer = DEV_SERVER
                        containerName = "efleyer-dev"
                        port = "8080:80"
                    } else if (env.BRANCH_NAME == 'main') {
                        input message: "Déployer en production ?"
                        targetServer = PROD_SERVER
                        containerName = "efleyer-prod"
                        port = "80:80"
                    } else {
                        error("Branche non déployable automatiquement : ${env.BRANCH_NAME}")
                    }

                    sshagent (credentials: ['ssh-credentials-id']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ${targetServer} '
                                docker pull ${IMAGE_NAME}:${IMAGE_TAG} &&
                                docker stop ${containerName} || true &&
                                docker rm ${containerName} || true &&
                                docker run -d --name ${containerName} -p ${port} ${IMAGE_NAME}:${IMAGE_TAG}
                            '
                        """
                    }
                }
            }
        }
    }
}



  
